## @mainpage Проект DHCP и DNS серверов
#
# @section intro_sec Введение
# Этот проект разработан для симуляции DHCP и DNS серверов. Он включает в себя реализацию основных функций серверов, 
# таких как предложение IP-адресов и разрешение доменных имен.
#
# @section author_sec Автор
# Разработчик: aleks15868 \n
# Почта: ml963852@yandex.ru
#
# @section config_sec Конфигурация
# Конфигурация серверов загружается из файла @ref configuration.json. В этом файле содержатся следующие параметры:
# - IP-адрес DHCP: 192.168.2.3
# - Маска подсети DHCP: 255.255.255.0
# - IP-адрес DNS: 192.168.2.4
# - Время жизни IP-адреса: 7200 секунд
# - Начальный диапазон IP: 192.168.2.5 - 192.168.2.100
#
# @section files_sec Основные файлы проекта
# - @ref dhcp_server.py "dhcp_server.py": Реализует функционал DHCP сервера.
# - @ref dns_server.py "dns_server.py": Реализует функционал DNS сервера.
# - @ref configuration.json "configuration.json": Содержит параметры конфигурации для DHCP и DNS серверов.
# - @ref domain_dns_name_ip.json "domain_dns_name_ip.json": Содержит список доменов и их IP для DNS сервера.

## @package mininet.net
# Mininet - это основной класс, который используется для создания и управления виртуальными сетями.

from mininet.net import Mininet
## @class Mininet
# @brief Этот класс представляет виртуальную сеть Mininet.
#
# Mininet моделирует сеть, состоящую из виртуальных хостов, свитчей, контроллеров и соединений.
# Она предоставляет методы для добавления устройств в сеть, установки соединений и управления топологией.
# Основные методы включают:
# - addHost: добавляет хост в сеть
# - addSwitch: добавляет свитч в сеть
# - addController: добавляет контроллер в сеть
# - start: запускает виртуальную сеть
# - stop: останавливает сеть и освобождает ресурсы

from mininet.node import Host, OVSSwitch, Controller
## @class Host
# @brief Класс для моделирования виртуального хоста в сети Mininet.
#
# Хосты представляют собой виртуальные машины с отдельными интерфейсами и IP-адресами.
# Они могут взаимодействовать друг с другом через сеть.
#
# Основные методы:
# - cmd: выполняет команды внутри виртуального хоста (например, для настройки интерфейсов, маршрутизации).
#
## @class OVSSwitch
# @brief Класс для моделирования свитча на базе Open vSwitch (OVS).
#
# Свитчи обеспечивают коммутацию пакетов между хостами на основе их MAC-адресов.
# Open vSwitch — это виртуальный свитч, поддерживающий программное управление.
#
## @class Controller
# @brief Класс для управления сетевой топологией через контроллер OpenFlow.
#
# Контроллер отвечает за установку и управление маршрутами трафика в сети.
# Он взаимодействует со свитчами для динамической настройки правил маршрутизации.
#
# Основные методы:
# - start: запуск контроллера
# - stop: остановка контроллера

from mininet.link import Intf
## @class Intf
# @brief Класс для подключения физических интерфейсов к виртуальной сети.
#
# Позволяет подключить реальный сетевой интерфейс (например, eth0) к виртуальному свитчу Mininet.
# Это дает возможность виртуальным хостам взаимодействовать с внешними сетями через физические интерфейсы.

from mininet.cli import CLI
## @class CLI
# @brief Класс для предоставления командной строки (CLI) для управления сетью.
#
# CLI позволяет взаимодействовать с сетью Mininet через командную строку, выполнять команды на хостах, проверять соединения и изменять топологию сети.

from mininet.log import setLogLevel, info
## @class setLogLevel
# @brief Функция для установки уровня логирования Mininet.
#
# Позволяет контролировать вывод логов Mininet, чтобы видеть больше или меньше информации о выполнении программы.
# Возможные уровни логирования: 'debug', 'info', 'warning', 'error'.
#
## @class info
# @brief Функция для вывода сообщений в лог.
#
# Используется для отображения информации в логах Mininet при выполнении программы.
# Это помогает отслеживать этапы выполнения программы и выводить важные сообщения.


## @brief Функция для создания и управления виртуальной сетью Mininet.
#
# Эта функция создает виртуальную сеть, состоящую из контроллера, свитча и двух хостов.
# Она также настраивает интерфейсы, задает IP-адреса, устанавливает маршруты,
# запускает DHCP и DNS серверы, и предоставляет интерактивный CLI для управления сетью.
def create_network():
# @brief Создание экземпляра Mininet с контроллером.
 
#Создается объект сети с указанным контроллером, который управляет сетью.
    net = Mininet(controller=Controller)

#Добавление контроллера в сеть.
#Контроллер управляет работой свитча и взаимодействием между хостами.
    net.addController('c0')

# @brief Создание виртуального свитча.

#Добавление свитча OVS (Open vSwitch) в сеть для соединения хостов.
    switch = net.addSwitch('s1')

# @brief Подключение физического интерфейса eth0 к виртуальному свитчу.

#Физический интерфейс (eth0) подключается к виртуальному свитчу, чтобы обеспечить взаимодействие с внешней сетью.
    Intf('eth0', node=switch)

# @brief Добавление хостов в сеть.

#Хосты представляют собой виртуальные машины с IP-адресами в указанном диапазоне.
    h1 = net.addHost('h1', ip='192.168.2.3/24')
    h2 = net.addHost('h2', ip='192.168.2.4/24')

#Подключение хостов к свитчу через виртуальные линк-соединения.
    net.addLink(h1, switch)
    net.addLink(h2, switch)

#Запуск виртуальной сети.
    net.start()

# @brief Настройка IP-адресов хостов вручную.

#Использование команды ifconfig для установки IP-адресов и сетевых масок на виртуальных хостах.
    h1.cmd('ifconfig h1-eth0 192.168.2.3 netmask 255.255.255.0')
    h2.cmd('ifconfig h2-eth0 192.168.2.4 netmask 255.255.255.0')

# @brief Настройка шлюза по умолчанию для хоста h1.

#Установка маршрута по умолчанию (шлюза) для выхода в сеть.
    h1.cmd('route add default gw 192.168.2.1')

# @brief Настройка шлюза по умолчанию для хоста h2.

#Установка маршрута по умолчанию (шлюза) для выхода в сеть.
    h2.cmd('route add default gw 192.168.2.1')

# @brief Запуск DHCP-сервера на хосте h1.

#Выполнение скрипта dhcp_server.py для предоставления услуг DHCP на хосте h1.
    info('*** Running DHCP script on h1\n')
    h1.cmd('sudo python3 dhcp_server.py &')
    
# @brief Запуск DNS-сервера на хосте h2.

#Выполнение скрипта dns_server.py для предоставления услуг DNS на хосте h2.
    info('*** Running DNS script on h1\n')
    h2.cmd('sudo python3 dns_server.py &')

#Запуск интерактивной оболочки Mininet CLI для ручного управления сетью.
    CLI(net)

# @brief Остановка DHCP-сервера на хосте h1.

#Остановка DHCP-сервера при помощи сигнала SIGINT.
    info('*** Closing DHCP server\n')
    h1.cmd('sudo pkill -SIGINT -f "python3 dhcp_server.py"')

# @brief Остановка DNS-сервера на хосте h2.

#Остановка DNS-сервера при помощи сигнала SIGINT.
    info('*** Closing DNS server\n')
    h2.cmd('sudo pkill -SIGINT -f "python3 dns_server.py"')

#Остановка виртуальной сети и освобождение ресурсов.
    net.stop()

## @brief Основная функция программы.
#
# Устанавливает уровень логирования и вызывает функцию создания сети.
if __name__ == '__main__':
    setLogLevel('info')
    create_network()
